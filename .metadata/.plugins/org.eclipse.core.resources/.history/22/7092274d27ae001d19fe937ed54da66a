package com.questionPro.task.Controller;

import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.questionPro.task.Entity.PastStory;
import com.questionPro.task.Entity.Story;
import com.questionPro.task.IntFc.QuestionPro;
import com.questionPro.task.Repo.PastStoryRepo;
import com.questionPro.task.Repo.StoryRepo;

@RestController
public class QuestionProController implements QuestionPro {

	@Autowired
	StoryRepo storyRepo;
	
	@Autowired
	CacheManager cacheManager;
	
	@Autowired
	PastStoryRepo pastStoryRepo;
	
	@Override
	@Cacheable("topStoriesCache")
	public Map<String ,Object> topStories() {
		Map<String ,Object> resultMap= new LinkedHashMap<>();
		final String url="https://hacker-news.firebaseio.com/v0/topstories.json";
		
		RestTemplate restTemplate = new RestTemplate();
		String result= restTemplate.getForObject(url, String.class);
		result=result.replaceAll("[\\[\\]]","");
		String[] ls=result.split(",");
		String storyUrl="https://hacker-news.firebaseio.com/v0/item/";
		for(int i=0;i<ls.length;i++) {
			String storyResult=restTemplate.getForObject(storyUrl+ls[i]+".json", String.class);
			JSONObject jsonObject = new JSONObject(storyResult);
			Story story= new Story();
			try {
			story.setCreatedDate(new Date());
			story.setScore(jsonObject.getInt("score"));
			story.setCreateBy("Yash");
			story.setStoryId(jsonObject.getInt("id"));
			story.setTitle(jsonObject.getString("title"));
			story.setUrl(jsonObject.getString("url"));
			storyRepo.save(story);
			}catch (Exception e) {
				System.out.println("Exception in persisting");
			}	
		}
		List<Story> topStories= storyRepo.findTop10OrderByScoreDesc();
		if(topStories!=null && !topStories.isEmpty()) {
			for(int i=0;i<topStories.size();i++) {
				JSONObject jsonObject = new JSONObject();
				jsonObject.put("Title",topStories.get(i).getTitle());
				jsonObject.put("Score",topStories.get(i).getScore());
				jsonObject.put("Url",topStories.get(i).getUrl());
				jsonObject.put("Date of Submission",topStories.get(i).getCreatedDate());
				jsonObject.put("Submitted By",topStories.get(i).getCreateBy());
				resultMap.put(((Integer)topStories.get(i).getStoryId()).toString(), jsonObject.toString());
			
				PastStory pastStory= new PastStory();
				try {
					pastStory.setCreatedDate(new Date());
					pastStory.setScore(jsonObject.getInt("score"));
					pastStory.setCreateBy("Yash");
					pastStory.setStoryId(jsonObject.getInt("id"));
					pastStory.setTitle(jsonObject.getString("title"));
					pastStory.setUrl(jsonObject.getString("url"));
					pastStoryRepo.save(pastStory);
					}catch (Exception e) {
						System.out.println("Exception in persisting"+ jsonObject.getInt("id"));
					}	
				}
			}
		else {
			System.out.println("No stories found");
		}
		
		return resultMap;
	}

	@Override
	public Map<String, Object> pastStories(Map<String, String> orderContext) {
		Map<String ,Object> resultMap= new LinkedHashMap<>();
		List<PastStory> pastStories= pastStoryRepo.findTop10OrderByCreatedDateDesc();
		if(pastStories!=null && !pastStories.isEmpty()) {
			System.out.println(pastStories.size());
			for(int i=0;i<pastStories.size();i++) {
				JSONObject jsonObject = new JSONObject();
				jsonObject.put("Title",pastStories.get(i).getTitle());
				jsonObject.put("Score",pastStories.get(i).getScore());
				jsonObject.put("Url",pastStories.get(i).getUrl());
				jsonObject.put("Date of Submission",pastStories.get(i).getCreatedDate());
				jsonObject.put("Submitted By",pastStories.get(i).getCreateBy());
				resultMap.put(((Integer)pastStories.get(i).getStoryId()).toString(), jsonObject.toString());
			}	
		}
		else {
			System.out.println("No stories found");
		}
		return resultMap;
	}

	@Override
	public Map<String, Object> comments(Map<String, String> orderContext) {
		// TODO Auto-generated method stub
		return null;
	}
	
	
	@Scheduled(fixedRate = 15 * 60000)
	@CacheEvict(value = "topStoriesCache")
    public void clearCache() {
        System.out.println("Clearing cache");
    }
	
	

}
